{"ast":null,"code":"var _jsxFileName = \"/Data/React/finexus-app/src/App.js\";\nimport React from 'react';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // value:\"Next\",\n      seconds: \"00\",\n      minutes: \"\"\n    };\n    this.secondsRemaining;\n    this.intervalHandle;\n  }\n\n  change(event) {\n    this.set.State({\n      value: event.target.value\n    });\n  }\n\n  tick() {\n    var min = Math.floor(this.secondsRemaining / 60);\n    var sec = this.secondsRemaining - min * 60;\n    this.setState({\n      minutes: min,\n      seconds: sec\n    });\n\n    if (sec < 10) {\n      this.setState({\n        seconds: \"0\" + this.state.seconds\n      });\n    }\n\n    if (min < 10) {\n      this.setState({\n        value: \"0\" + min\n      });\n    }\n\n    if (min === 0 & sec === 0) {\n      clearInterval(this.intervalHandle);\n    }\n\n    this.secondsRemaining--;\n  }\n\n  startCountDown() {\n    this.intervalHandle = setInterval(this.tick, 1000);\n    let time = this.state.minutes;\n    this.secondsRemaining = time * 60;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: e => this.change,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.value), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.minutes, \":\", this.state.seconds));\n  }\n\n}","map":{"version":3,"sources":["/Data/React/finexus-app/src/App.js"],"names":["React","App","Component","constructor","props","state","seconds","minutes","secondsRemaining","intervalHandle","change","event","set","State","value","target","tick","min","Math","floor","sec","setState","clearInterval","startCountDown","setInterval","time","render","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,eAAe,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAiC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACT;AACAC,MAAAA,OAAO,EAAE,IAFA;AAGTC,MAAAA,OAAO,EAAE;AAHA,KAAX;AAKA,SAAKC,gBAAL;AACA,SAAKC,cAAL;AACD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAO;AACX,SAAKC,GAAL,CAASC,KAAT,CAAe;AACbC,MAAAA,KAAK,EAAEH,KAAK,CAACI,MAAN,CAAaD;AADP,KAAf;AAGD;;AAEDE,EAAAA,IAAI,GAAE;AACJ,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKX,gBAAL,GAAwB,EAAnC,CAAV;AACA,QAAIY,GAAG,GAAG,KAAKZ,gBAAL,GAAyBS,GAAG,GAAG,EAAzC;AAEA,SAAKI,QAAL,CAAc;AACZd,MAAAA,OAAO,EAAEU,GADG;AAEZX,MAAAA,OAAO,EAAEc;AAFG,KAAd;;AAKA,QAAIA,GAAG,GAAG,EAAV,EAAc;AACZ,WAAKC,QAAL,CAAc;AACZf,QAAAA,OAAO,EAAE,MAAM,KAAKD,KAAL,CAAWC;AADd,OAAd;AAGD;;AACD,QAAIW,GAAG,GAAG,EAAV,EAAc;AACd,WAAKI,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAE,MAAMG;AADD,OAAd;AAGC;;AACD,QAAIA,GAAG,KAAK,CAAR,GAAYG,GAAG,KAAK,CAAxB,EAA2B;AAC3BE,MAAAA,aAAa,CAAC,KAAKb,cAAN,CAAb;AACC;;AAED,SAAKD,gBAAL;AAED;;AAEDe,EAAAA,cAAc,GAAG;AACf,SAAKd,cAAL,GAAsBe,WAAW,CAAC,KAAKR,IAAN,EAAY,IAAZ,CAAjC;AACA,QAAIS,IAAI,GAAG,KAAKpB,KAAL,CAAWE,OAAtB;AACA,SAAKC,gBAAL,GAAwBiB,IAAI,GAAG,EAA/B;AACC;;AAEHC,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWS,KAArC;AAA4C,MAAA,QAAQ,EAAGa,CAAD,IAAK,KAAKjB,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuB,KAAKL,KAAL,CAAWS,KAAlC,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAO,KAAKT,KAAL,CAAWE,OAAlB,OAA4B,KAAKF,KAAL,CAAWC,OAAvC,CAHF,CADF;AAOD;;AA3D6C","sourcesContent":["import React from 'react'\n\n\nexport default class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      // value:\"Next\",\n      seconds: \"00\",\n      minutes: \"\"\n    }\n    this.secondsRemaining; \n    this.intervalHandle;\n  }\n\n  change(event){\n    this.set.State({\n      value: event.target.value\n    });\n  }\n\n  tick(){\n    var min = Math.floor(this.secondsRemaining / 60);\n    var sec = this.secondsRemaining - (min * 60);\n\n    this.setState({\n      minutes: min,\n      seconds: sec\n    })\n\n    if (sec < 10) {\n      this.setState({\n        seconds: \"0\" + this.state.seconds,\n      })\n    }\n    if (min < 10) {\n    this.setState({\n      value: \"0\" + min,\n     })\n    }\n    if (min === 0 & sec === 0) {\n    clearInterval(this.intervalHandle);\n    }\n\n    this.secondsRemaining--\n\n  }\n\n  startCountDown() {\n    this.intervalHandle = setInterval(this.tick, 1000);\n    let time = this.state.minutes;\n    this.secondsRemaining = time * 60;\n    }\n\n  render(){\n    return (\n      <div>\n        <input type=\"text\" value={this.state.value} onChange={(e)=>this.change} />\n        <button type=\"button\">{this.state.value}</button>\n        <span>{this.state.minutes}:{this.state.seconds}</span>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}